<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-14T09:46:15-07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Jiahui Bao</title><subtitle>空山无人</subtitle><author><name>Jiahui</name></author><entry><title type="html">Differential Privacy, From My Perspective</title><link href="http://localhost:4000/blog/privacy.html" rel="alternate" type="text/html" title="Differential Privacy, From My Perspective" /><published>2021-07-14T00:00:00-07:00</published><updated>2021-07-14T00:00:00-07:00</updated><id>http://localhost:4000/blog/privacy</id><content type="html" xml:base="http://localhost:4000/blog/privacy.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Differential Privacy has been gaining significant attention in research. Working in tech industry, I have mixed feeling about topics related to data privacy. There’s no doubt that we deal with huge amount of data from users, and privacy should be valued. However, data seems to be a concept that covers basically everything, which leaves us wondering what kind of information should be private and how we monitor the whole cycle from collecting data to using them. Some people feel uncomfortable about being a record in database, especially with identifications. Once we have raw data in database, to prevent malicious people from seeing or using the data, access control is always necessary. And of course, the black box where data is leverage to learn your behavior, which raises lots of concerns.&lt;/p&gt;

&lt;p&gt;While there’re a lot of methods dealing with privacy, the overall procedure that processes raw data to derive information, is exactly where differential privacy kicks in. It provides a rigorous privacy framework without which people may feel confusing about what we are talking about when we talk about privacy.&lt;/p&gt;

&lt;p&gt;A simple method is to add a noise to every piece of data so that you’ll never know individual’s activity correctly, but some useful insights can still be derived from large number of records.&lt;/p&gt;

&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;

&lt;p&gt;Differential privacy is defined upon randomized algorithms &lt;script type=&quot;math/tex&quot;&gt;M : A \to \Delta(B)&lt;/script&gt;, which maps a domain A to a probability simplex over discrete range B. For each &lt;script type=&quot;math/tex&quot;&gt;a \in A: Pr(M(a) = b) = (M(a))_{b}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;(\epsilon, \delta)&lt;/script&gt;-differentially private randomized algorithm is defined as &lt;script type=&quot;math/tex&quot;&gt;\forall S \subseteq B&lt;/script&gt;:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;Pr[M(x) \in S] \le exp(\epsilon) Pr[M(y) \in S] + \delta&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;x, y \in S&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\|x-y\|_{1} = 1&lt;/script&gt; (l1 distance).&lt;/p&gt;

&lt;p&gt;Another concept is privacy loss. It quantifies differential privacy:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;L(\xi)_{M(x)\mid M(y)} = \ln \frac{Pr[M(x) = \xi]}{Pr[M(y) = \xi]}&lt;/script&gt;

&lt;p&gt;The definition is pretty straightforward. The core how we protect privacy is about no exposure on individual data, so the above term guarantees a single record should make little difference to the overall outcome. &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt; indicates how private it ensures, every small value would be pretty much the same (like all &lt;script type=&quot;math/tex&quot;&gt;\epsilon&lt;/script&gt; in maths). &lt;script type=&quot;math/tex&quot;&gt;\delta&lt;/script&gt; means there’s still a bit possibility that privacy loss is not preserved in the certain bound, and in many circumstances &lt;script type=&quot;math/tex&quot;&gt;\delta&lt;/script&gt; is set to 0.&lt;/p&gt;

&lt;p&gt;This definition also promises in economical view, utility for each person will be same no matter they participate the survey or not. I find this aligns with GDPR on the principle that data subject has the right to decide whether their data can be used to do certain tasks or not. Theoretically, if an individual understands that this action about their data doesn’t affect anything in terms of their future utility, he or she should give the consent on collecting the data and it will also be easier to collect data for a differentially private survey.&lt;/p&gt;

&lt;h2 id=&quot;techniques&quot;&gt;Techniques&lt;/h2&gt;
&lt;h3 id=&quot;randomized-response&quot;&gt;Randomized Response&lt;/h3&gt;
&lt;p&gt;This is a simple mechanism, an example is that flip a coin before giving the answer (Y or N), give the original response if head and give opposite response if tail.&lt;/p&gt;

&lt;h3 id=&quot;the-laplace-mechanism&quot;&gt;The Laplace Mechanism&lt;/h3&gt;
&lt;p&gt;For any query function &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; that gives continuous variable, we add noises to the result, and the noise &lt;script type=&quot;math/tex&quot;&gt;Y_{i}&lt;/script&gt; follows Laplace distribution, which is symmetric version of the exponential distribution:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;M(x) = f(x) + Y_{1}...Y_{k}&lt;/script&gt;

&lt;h3 id=&quot;smalldb&quot;&gt;SmallDB&lt;/h3&gt;
&lt;p&gt;For a series of queries, privacy may be increased if Q1 and Q2 are asking similar questions with small differences. In this setting, correlated noises could be added to each query which makes more sense than independent random noises.&lt;/p&gt;

&lt;p&gt;The idea of SmallDB Algorithm is for a series of queries, we sample a small portion of the entire database to preserve given accuracy and privacy. The size of this small database is determined by number of queries and required accuracy, and it uses exponential mechanism to generate probability distribution with utility function of measuring error incurred by approximation.&lt;/p&gt;

&lt;p&gt;There is also an online mechanism with the same purpose: private multiplicative weights.&lt;/p&gt;

&lt;h3 id=&quot;differentially-private-sgd&quot;&gt;Differentially Private SGD&lt;/h3&gt;
&lt;p&gt;In deep learning, parameters are learned from a black box consist of neural networks. Differentially Private SGD is proposed to make the black box differentially private by controlling the influence of the training data during SGD computation.&lt;/p&gt;

&lt;p&gt;The algorithm maintains the normal SGD procedure, while minimizing loss function, the gradient is computed for a randomly chosen subset of data, and add gaussian noise to gradient obtained.&lt;/p&gt;

&lt;h2 id=&quot;in-industry&quot;&gt;In Industry&lt;/h2&gt;
&lt;p&gt;Plenty of organizations are starting utilizing Differential Privacy for privacy concerns. US 2020 Census also leverages it, with no surprise. I did little research on the current progress from some companies.&lt;/p&gt;

&lt;h3 id=&quot;apple&quot;&gt;Apple&lt;/h3&gt;
&lt;p&gt;According to &lt;a href=&quot;https://www.apple.com/privacy/docs/Differential_Privacy_Overview.pdf&quot;&gt;Apple’s Differential Privacy Overview&lt;/a&gt;, differential privacy is adopted when apple collecting data from users. A noise will be added locally to user’s data before sending it to Apple.&lt;/p&gt;

&lt;h3 id=&quot;google&quot;&gt;Google&lt;/h3&gt;
&lt;p&gt;Google open sourced a &lt;a href=&quot;https://github.com/google/differential-privacy/&quot;&gt;library&lt;/a&gt; which supports differential privacy mechanism. Also Google has also rolled out support for differentially private queries in query engine.&lt;/p&gt;

&lt;h3 id=&quot;facebook&quot;&gt;Facebook&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ai.facebook.com/blog/introducing-opacus-a-high-speed-library-for-training-pytorch-models-with-differential-privacy/&quot;&gt;Opacus was released for training PyTorch models with differential privacy&lt;/a&gt;. This uses DP SGD discussed above.&lt;/p&gt;

&lt;h2 id=&quot;now---future&quot;&gt;Now -&amp;gt; Future&lt;/h2&gt;
&lt;p&gt;Differential Privacy theory is promising in research. Dozens of new ideas worth exploring in the future under the currently framework. I would be happy to see algorithms performing well and in the mean time preserving privacy for everyone.&lt;/p&gt;

&lt;p&gt;While data has been weaponized (exaggerated though) and privacy talks is prevailing, finishing up this blog, I’m still holding back about applying the concept to actual usages. Unless more strict regulations closely related to differential privacy are enforced, companies may not see enough benefits for them to be motivated to have it in a wide range, especially smaller businesses. Even under the assumption that efficiency and accuracy stay the same, not sure is there any privacy concern over current data query models. But it’s just like many other research areas, improvements step by step can lead to huge changes.&lt;/p&gt;</content><author><name>Jiahui</name></author><category term="blog" /><category term="tech" /><summary type="html">Introduction Differential Privacy has been gaining significant attention in research. Working in tech industry, I have mixed feeling about topics related to data privacy. There’s no doubt that we deal with huge amount of data from users, and privacy should be valued. However, data seems to be a concept that covers basically everything, which leaves us wondering what kind of information should be private and how we monitor the whole cycle from collecting data to using them. Some people feel uncomfortable about being a record in database, especially with identifications. Once we have raw data in database, to prevent malicious people from seeing or using the data, access control is always necessary. And of course, the black box where data is leverage to learn your behavior, which raises lots of concerns.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/seattle-0.jpeg" /></entry><entry><title type="html">Some interesting books I read in 2020</title><link href="http://localhost:4000/blog/books-2020.html" rel="alternate" type="text/html" title="Some interesting books I read in 2020" /><published>2020-12-29T00:00:00-08:00</published><updated>2020-12-29T00:00:00-08:00</updated><id>http://localhost:4000/blog/books-2020</id><content type="html" xml:base="http://localhost:4000/blog/books-2020.html">&lt;h2 id=&quot;alexander-hamilton&quot;&gt;Alexander Hamilton&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;revolutions ended in tyranny because they glorified revolution as a permanent state of mind.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A peek in to how this nation was born and a man who aspires to create it.&lt;/p&gt;

&lt;p&gt;For someone like me who is not that knowledgeable about US history, this book is not just about a giant who designs and believes in the strong government and complex political system with solid financial backup, it’s also a biography of the early United States where rioting and passion never vanish, and founding fathers, grouped by parties, seek chances building an ideal society in their views.&lt;/p&gt;

&lt;h2 id=&quot;development-as-freedom&quot;&gt;Development as Freedom&lt;/h2&gt;

&lt;p&gt;It’s a view of freedom from economic perspective. People keep talking about does freedom help development or not, but the book intends to break the causal relationship, and to construct a new theory about freedom by seeing it as capability. If just looking at the conclusion, you may take things like “freedom is important” for granted, and measure it as some concepts serving political needs. However, it’s pretty enjoyable to watch Sen picking each example, introducing structures to complete a building of new economical freedom brick by brick.&lt;/p&gt;

&lt;h2 id=&quot;bottle-of-lies-the-inside-story-of-the-generic-drug-boom&quot;&gt;Bottle of Lies: The Inside Story of the Generic Drug Boom&lt;/h2&gt;

&lt;p&gt;An astonishing scandal involving people desperate for cheap drugs, “meaningless” efforts made by individuals, “evil” companies, historically do-nothing FDA, politics and poor regulations. yet sadly the same story will happen again and again and again.&lt;/p&gt;

&lt;h2 id=&quot;creativity-inc--overcoming-the-unseen-forces-that-stand-in-the-way-of-true-inspiration&quot;&gt;Creativity, Inc. : Overcoming the Unseen Forces That Stand in the Way of True Inspiration&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Too often, we grab the handle and – without realizing it – walk off without the suitcase. What’s more, we don’t even think about what we’ve left behind. After all, the handle is so much easier to carry around than the suitcase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fun stories behind Pixar, an unconventional start-up that creates fun.&lt;/p&gt;

&lt;h2 id=&quot;dynamics-of-japans-trade-and-industrial-policy-in-the-post-rapid-growth-era-19802000&quot;&gt;Dynamics of Japan’s Trade and Industrial Policy in the Post Rapid Growth Era (1980–2000)&lt;/h2&gt;

&lt;p&gt;How Japan boosts economy while western countries actively trying suppressing them. Never read through policy from a country before, it’s quite interesting to know a little about tactics governments dealing with governments. From current point of view, a lot of developing countries should also be doing something similar to stimulate their local industry and also to go to global market.&lt;/p&gt;

&lt;h2 id=&quot;the-story-of-art&quot;&gt;The Story of Art&lt;/h2&gt;

&lt;p&gt;Art history 101. The book uncovers how those masterpieces come with social changes. Art could be created by people with a clear aim to present the beauty or harmony they treasure, and can also be a reflection of physical world, and in later time, it’s more like an expression of feelings without any bounded framework.&lt;/p&gt;</content><author><name>Jiahui</name></author><category term="blog" /><category term="book" /><summary type="html">Alexander Hamilton revolutions ended in tyranny because they glorified revolution as a permanent state of mind.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/poke-0.jpg" /></entry><entry><title type="html">Data Quality, Young and Promising?</title><link href="http://localhost:4000/blog/dataQuality.html" rel="alternate" type="text/html" title="Data Quality, Young and Promising?" /><published>2020-10-24T00:00:00-07:00</published><updated>2020-10-24T00:00:00-07:00</updated><id>http://localhost:4000/blog/dataQuality</id><content type="html" xml:base="http://localhost:4000/blog/dataQuality.html">&lt;h1 id=&quot;data-quality&quot;&gt;Data Quality&lt;/h1&gt;

&lt;p&gt;Data has been put into the central of lots of software systems, as data driven methods growing popularity in all kinds of business.Companies are hiring tons of data scientists or data analysts (or other fancy titles doing similar work) to mine information from data and reduce cost or make profit through it.&lt;/p&gt;

&lt;p&gt;We now have a standard software develop process: write code, push differences, deploy, roll back if things are broken, monitoring… With the massive usage of data in many places, people are trying to build something similar for data, in a way that data also should be validated before consuming, be under constant monitoring and potential points of error should be identified as soon as possible.&lt;/p&gt;

&lt;p&gt;Data quality is still a relatively new field, not as crowded as many problem scopes. Yet, many big tech companies have built their own solutions, and several entrepreneur s come into this market in recent years. So in this article, I’ll start with a summary on the common practice conduct by those existing systems, and also take a look at start-ups streaming into the competition.&lt;/p&gt;

&lt;h2 id=&quot;common-components&quot;&gt;Common Components&lt;/h2&gt;
&lt;h3 id=&quot;meta-data&quot;&gt;Meta Data&lt;/h3&gt;
&lt;p&gt;Before doing any meaningful thing using any data, people keep asking question about questions about basic information about this ot that table, for example, the source of the data, what this data should be look like or who should I contact when the data is wrong. These kinds of questions should not be coupled with by going around the office and look for people who is responsible for that, and who is probably not at his/her table every time.&lt;/p&gt;

&lt;p&gt;In 2020s, we should have a more modern way to handle that, and that is the data catalog system, which is not a new thing.&lt;/p&gt;

&lt;p&gt;Commonly, it will provide schema, owner and description about tables across database that users can easily check on a central portal. Moreover, in many metadata system, some additional features are also added depending on different use case. &lt;a href=&quot;https://eng.uber.com/databook/&quot;&gt;Uber Databook&lt;/a&gt; maintains the freshness and lineage of data, &lt;a href=&quot;https://medium.com/airbnb-engineering/democratizing-data-at-airbnb-852d76c51770&quot;&gt;AirBnB Dataportal&lt;/a&gt; also has top user information.&lt;/p&gt;

&lt;p&gt;Here, I would call out that a lineage graph for tracking how data is transformed in data pipelines is a popular and important part to meta data nowadays. People can dig out a clear insight of data pipelines, statistics and metrics can be generated, and potential issues are always hidden behind it.&lt;/p&gt;

&lt;h3 id=&quot;data-validation&quot;&gt;Data Validation&lt;/h3&gt;
&lt;p&gt;Lots of data engineers, data scientists are suffering from bad data. Where data could go wrong can be the foremost aspect to solve the issue. Data can go wrong in different stage of data processing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Infrastructure: when infrastructure is down, data could not be retrieve,&lt;/li&gt;
  &lt;li&gt;Data Pipelines: some data pipeline job can fail due to various reasons.&lt;/li&gt;
  &lt;li&gt;Data Structure: things like schema changes.&lt;/li&gt;
  &lt;li&gt;Values: things like null values, abnormal data, wrong format.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regarding data in tables, there’re also a lot checks we can do to dig out potential issues:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;range to data: too big? too small?&lt;/li&gt;
  &lt;li&gt;format: if it’s a date, it should not look like this&lt;/li&gt;
  &lt;li&gt;freshness: too old?&lt;/li&gt;
  &lt;li&gt;volumes: should be more data here?&lt;/li&gt;
  &lt;li&gt;a lot more..&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s tough job to do well in data validation, enforcing rules for tables from your database might not be comprehensive enough and there’s always seasonality in values that you have to manually change your rules across time. Some team are trying machine learning or time series model on numerical values, and often have lots of false positive and couldn’t get results accurate enough.&lt;/p&gt;

&lt;p&gt;There are also many ways to apply validation depending on different needs. A validation step can be added to many part of the system: before deploy, before analytical work, after data pipeline job and so on. It’s definitely an indispensable segment in data quality.&lt;/p&gt;

&lt;h3 id=&quot;circuit-breaker&quot;&gt;Circuit Breaker&lt;/h3&gt;
&lt;p&gt;Circuit breaker, originally a concept from electrical engineering, borrowed by software system to introduce a pattern to act as a protector to prevent disaster caused by malfunction of a single service in a huge system.&lt;/p&gt;

&lt;p&gt;Circuit breaker is used by wrapping all the calls to a service with this circuit breaker object that monitor failures, and when the number of failures reaches a certain limit (or other triggering conditions), the circuit will be open, which means further calls will not reach the service until the problem is fixed and close the circuit.&lt;/p&gt;

&lt;p&gt;The same pattern could be leveraged by data quality monitoring system: instead of detecting calls failures and malfunction of a service, the circuit will be open whenever data issue is detected, so that downstream service will not consume the known bad data that can lead to catastrophic ramification.&lt;/p&gt;

&lt;h2 id=&quot;the-competition-pool&quot;&gt;The Competition Pool&lt;/h2&gt;
&lt;p&gt;None of the companies could refuse to follow current trend, and neither do their customers. So you can image, every product is coming with the following features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;fast, easy, no-code onboarding process&lt;/li&gt;
  &lt;li&gt;compatible with main-stream database/warehouses&lt;/li&gt;
  &lt;li&gt;cloud based everything&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;databand&quot;&gt;Databand&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://databand.ai/&quot;&gt;Databand&lt;/a&gt; is building open-source product that manage data pipelines from orchestration, task metadata to alert. If you’re using (Apache Airflow)[https://airflow.apache.org/], that should be something interesting and they’re making efforts to make Airflow easier to use with several optimizations and Databand as a manager and master for your DAGs.&lt;/p&gt;

&lt;h3 id=&quot;datafold&quot;&gt;Datafold&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.datafold.com/&quot;&gt;Datafold&lt;/a&gt; is focus on analytical data, and their tool includes tables diff across database, validations and alerts. The live example app on their website is not so straightforward for new users like me. their main tool is a data version of code diffs: it would be easy for you to compare tables in different stages or versions, in respect of schema, statistics, primary keys…&lt;/p&gt;

&lt;p&gt;It’s interesting that the team are trying to reduce pain in analytical work. Let’s see if that fits people’s need!&lt;/p&gt;

&lt;h3 id=&quot;great-expectation&quot;&gt;Great Expectation&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://greatexpectations.io/&quot;&gt;Great Expectation&lt;/a&gt; is an open-source package in Python for setting expectation for setting up expectations about columns in your table like the format of strings and the range of values. It also includes a auto profiling feature for your data that automatically generates expectations and some other tools for configuring, validating and writing docs.&lt;/p&gt;

&lt;p&gt;It’s certainly a great light-weight tool that helps with working with data, making sure everything is in control, but it only works in Python/Bash for now, and it seems to be not flexible and scalable to provide a unifying solution for long-lasting large systems with lots of data, services and pipelines.&lt;/p&gt;

&lt;h3 id=&quot;monte-carlo&quot;&gt;Monte Carlo&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.montecarlodata.com/&quot;&gt;Monte Carlo&lt;/a&gt;, a start-up with an interesting name founded by a couple who seems to be quite experienced in data business. they bring up a concept “data downtime” as a measurement of data quality, and they are bringing solutions similar to solving “service downtime” with their observability engine that works from ETL, data warehouse to BI tools and tracks critical metrics about data leveraging machine learning. Their goal is let customers understand data, prevent data downtime, and trust data.&lt;/p&gt;

&lt;h3 id=&quot;toro&quot;&gt;Toro&lt;/h3&gt;
&lt;p&gt;ex-Uber, any SQL based, JDBC compliant database
built on top of data warehouse, runs your queries and suggests and collects metrics, with some analytic and alert functionality.&lt;/p&gt;

&lt;h3 id=&quot;soda&quot;&gt;Soda&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.soda.io/&quot;&gt;Soda&lt;/a&gt; is building a product that bring data issues to your team in real time. Their unique feature is that after they find issues in your data, they would prioritize the issues and let people resolve them in order. Not clear about sources of data they work with, they don’t have much information on their website.&lt;/p&gt;

&lt;h3 id=&quot;dont-forget-those-tech-giants&quot;&gt;Don’t forget those tech giants&lt;/h3&gt;
&lt;p&gt;Big techs certainly have their homegrown versions of data quality system tailored for their business. Netflix has down versioned data, circuit breaker mechanism for data, safe deployment for data. Google has more than one teams building data quality tools that can help check behavior in data with multiple statistical models and send alerts, other teams choose to onboard to these platforms based on their needs.&lt;/p&gt;

&lt;h2 id=&quot;tiny-market-or-bright-future&quot;&gt;Tiny Market or Bright Future?&lt;/h2&gt;
&lt;p&gt;There’s not lot start-ups trying to take over data quality business in the market, which gives everyone an opportunity to do something. Moreover, considering nearly all the industries going onto cloud and taking more seriously about data, data quality is coming into a maturer market and is essential in decent data solution.&lt;/p&gt;

&lt;p&gt;However, some companies are already providing softwares that include data integration, data governance and other related stuffs in one place, I see some of them also added data quality component to their features. Similarly, some of the data validation checks can be accomplished by other existing big cloud provider or data warehouse. Even though those features are simpler and incomplete comparing to a nice general data quality solution and can never substitute them, they are satisfying needs of some of the potential customers and also have advantages like great integration and low friction to pick up.&lt;/p&gt;

&lt;p&gt;Data workers always talk about pains in data reliability in interviews and articles, why not let softwares take care of that just like how we utilize tools for developing, for deployment or for monitoring? I believe it is a problem to be widely resolved to make their life better, Because Engineers &amp;amp; scientists’ happiness matters!&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/bliki/CircuitBreaker.html&quot;&gt;CircuitBreaker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/toro-data-quality/data-discovery-in-2020-8c85eed328bb&quot;&gt;Data Discovery in 2020&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/analytics-and-data/data-management-quality-and-governance-3082fff40950&quot;&gt;Data Management, Quality and Governance&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/data-validation-netflix/&quot;&gt;Crisis to Calm: Story of Data Validation @ Netflix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jiahui</name></author><category term="blog" /><category term="tech" /><summary type="html">Data Quality</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/fire-on-car.png" /></entry><entry><title type="html">Behind Linkedin “People Also Viewed</title><link href="http://localhost:4000/blog/peopleAlsoViewed.html" rel="alternate" type="text/html" title="Behind Linkedin “People Also Viewed" /><published>2020-09-19T00:00:00-07:00</published><updated>2020-09-19T00:00:00-07:00</updated><id>http://localhost:4000/blog/peopleAlsoViewed</id><content type="html" xml:base="http://localhost:4000/blog/peopleAlsoViewed.html">&lt;h1 id=&quot;behind-linkedins-people-also-viewed&quot;&gt;Behind Linkedin’s “People Also Viewed”&lt;/h1&gt;

&lt;p&gt;I seldom use LinkedIn, but every time I click into some one’s Linkedin profile, several familiar names would show up in this “People Also Viewed” section. It is an excellent feature, for connecting you with other people you might be interested in, through a basic recommendation system. However, just like all the noisy posts constantly occupying my timeline on LinkedIn, “People Also Viewed” doesn’t really fit my need to see some eye-catching people that I would love connect to, and instead, it keeps pushing someone I’ve already known.&lt;/p&gt;

&lt;h2 id=&quot;guess-the-model-behind-the-black-box&quot;&gt;Guess the model behind the black box&lt;/h2&gt;
&lt;p&gt;Ignoring all the sophisticated technical details behind this simple list of profiles, which have to be a lot considering how many users they have, I tried to propose a speculation on what the model looks like, based on resources I found online and my own experience with this feature.&lt;/p&gt;

&lt;h3 id=&quot;co-occurrences&quot;&gt;Co-occurrences&lt;/h3&gt;
&lt;p&gt;To begin with, as &lt;a href=&quot;https://www.quora.com/How-exactly-does-LinkedIn-generate-the-viewers-of-this-profile-also-viewed-list-of-users&quot;&gt;Jay wrote on Quora&lt;/a&gt; in 2011, the logic should be built on top of a simple concept based on &lt;strong&gt;co-occurrence&lt;/strong&gt;.  Basically it captures the similarity between user profiles based on common interests. In this case, for example, if you and John are both looking at someone’e LinkedIn profile, it’s intuitive to think you two might have a common interest, and when you ask more people to view, it’s natural to give you another person John likes. Moreover, it’s highly likely that you’re always signaling common interest with hundreds or thousands of people when you are viewing a LinkedIn page, depending on its popularity.&lt;/p&gt;

&lt;p&gt;Thus in general, what &lt;em&gt;People Also Viewed&lt;/em&gt; does is to use all the “who views who”, “who works for who” data to create a feature vector for everyone, generate a giant sparse matrix representing the number of common interests between two people, and query it for top n people holding most  number of common interests with a certain person and show them on that person’s profile page.&lt;/p&gt;

&lt;p&gt;Here, we have an simplified example of the overall process, that a like of “people also viewed” profiles is generated through 3 single factors from John Doe’s data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/pav-0.png&quot; alt=&quot;an example&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;factors-influencing-outcomes&quot;&gt;Factors Influencing Outcomes&lt;/h3&gt;
&lt;p&gt;The most important thing, however, seems to be the selected features that we would like to grasp in the model. &lt;em&gt;People Also Viewed&lt;/em&gt; should essentially use “who views who” information, as its name suggests, but a single metric would not satisfy LinkedIn engineers for sure. 
A list of stuffs that might been taken into consideration are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;people one viewed&lt;/li&gt;
  &lt;li&gt;schools one goes/went to&lt;/li&gt;
  &lt;li&gt;companies one works/worked for&lt;/li&gt;
  &lt;li&gt;job one applied for&lt;/li&gt;
  &lt;li&gt;people one connected with&lt;/li&gt;
  &lt;li&gt;groups one is in&lt;/li&gt;
  &lt;li&gt;job title&lt;/li&gt;
  &lt;li&gt;location&lt;/li&gt;
  &lt;li&gt;should be more…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That will give us a vector representing the feature of one user like the following one ( 1 := yes):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;viewed by user A&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;viewed by user B&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;viewed by user C&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;went to university of puppy&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;worked for Amazon&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Seattle&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;this means this user viewed by A and B but not by C, went to university of puppy, living in Seattle but never worked for Amazon.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;1 and 0 in the vector stand for two discrete states of true or false. But it doesn’t  have to be always like this. One weight can be added to this is time: that you views someone’s profile today and that you viewed someone’s profile 3 years ago should be telling a quite different story about your preference, at least the ramification on the recommendation should be at different level of confidence. Thus, if you viewed by someone’s profile 1 years ago, the number in your feature vector will be something like 0.01 in stead of 1. If we select a window of 1 year, here is a graph of relationship between date of an action and its weight (or confident level)&lt;/p&gt;

&lt;h3 id=&quot;measuring-similarity&quot;&gt;Measuring Similarity&lt;/h3&gt;
&lt;p&gt;Since the fundamental logic is about &lt;strong&gt;co-occurrence&lt;/strong&gt;, the first distance function fit for this use case to measure the similarity between two users is [L1 distance], which measures the number of different occurrence between two vectors.&lt;/p&gt;

&lt;h3 id=&quot;be-fancier&quot;&gt;Be Fancier&lt;/h3&gt;
&lt;p&gt;Considering how tech companies love to deal with anything similar to a recommendation system, I would guess they might try updating their model by leveraging neural networks (aka AI), which is not difficult for well-paid talents working there, as long as the performance trumps the old one. A straightforward performance metric is by counting the number of times you click on the link to profiles given by &lt;em&gt;People Also Viewed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;also, the model is used for a lot of pages other than individual profiles: LinkedIn is pushing potential jobs you’re suitable apply, linking one college/company to a bunch of other colleges/companies that seem to be related to the one you’re viewing…&lt;/p&gt;

&lt;h2 id=&quot;personal-notes&quot;&gt;Personal Notes&lt;/h2&gt;
&lt;p&gt;I’m constantly disappointed by recommendation systems which are all over internet, but not so interesting. I keep complaining about how the algorithm of Youtube keep pushing repetitive contents to me, and I find it hard to see anything surprising there, despite an unimaginable complicated system and engineer hours behind it. 
LinkedIn  &lt;em&gt;People Also Viewed&lt;/em&gt; here, however, starting from a non-ML mapReduce algorithm, is not designed to be that surprising. and I believe, it works pretty well for its use case. Nevertheless, in the future, I’d like to see more unexpected name from the list, whom I’m not able to induce his/her whole LinkedIn profile from that one-line self introduction.&lt;/p&gt;</content><author><name>Jiahui</name></author><category term="blog" /><category term="tech" /><summary type="html">Behind Linkedin’s “People Also Viewed”</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/face-1.jpg" /></entry><entry><title type="html">Dependency Injection and Using Guice</title><link href="http://localhost:4000/blog/DIandGuice.html" rel="alternate" type="text/html" title="Dependency Injection and Using Guice" /><published>2020-05-14T00:00:00-07:00</published><updated>2020-05-14T00:00:00-07:00</updated><id>http://localhost:4000/blog/DIandGuice</id><content type="html" xml:base="http://localhost:4000/blog/DIandGuice.html">&lt;h1 id=&quot;dependency-injection-and-using-guice&quot;&gt;Dependency Injection and Using Guice&lt;/h1&gt;

&lt;h2 id=&quot;dependency-injection&quot;&gt;Dependency Injection&lt;/h2&gt;
&lt;p&gt;Simply put… A client receives service instances that it dependents on.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;YourService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;YourServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[For Details: https://en.wikipedia.org/wiki/Dependency_injection]&lt;/p&gt;

&lt;h2 id=&quot;using-guice-for-dependency-injection&quot;&gt;Using Guice for Dependency Injection&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/google/guice/&quot;&gt;Guice&lt;/a&gt;, a simple DI framework for Java.&lt;/p&gt;

&lt;p&gt;As its Wiki writes, you can think of Guice as a map to bind each dependency to a provider.&lt;/p&gt;

&lt;h3 id=&quot;main-purpose&quot;&gt;Main purpose&lt;/h3&gt;
&lt;p&gt;Instead of letting clients to look up dependencies as the above pattern, an injector interface will handle that. (&lt;code class=&quot;highlighter-rouge&quot;&gt;@Inject&lt;/code&gt; is the new &lt;code class=&quot;highlighter-rouge&quot;&gt;A = new B();&lt;/code&gt;). This interface should be defined in a module class, binding interfaces or class with the implementation or provider you want, and using injectors to create new instances according to your bindings.&lt;/p&gt;

&lt;h3 id=&quot;an-example&quot;&gt;An Example&lt;/h3&gt;
&lt;p&gt;We have this old-fashioned BugGeneratorService:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BugGeneratorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateBug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RandomBugGeneratorService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Data accessor to get a bug instance&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Constructor&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bugDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// method to generate a random bug&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateBug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRandomBug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A client will do something like this, or put it inside a factory class.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkBugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generateBug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;moving-to-guice&quot;&gt;Moving to Guice&lt;/h4&gt;
&lt;p&gt;Define Module to declare dependencies. Here, BugGeneratorService is bound to RandomBugGeneratorService and BugDao is bound to a provider for NetworkBugDao.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyModule&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AbstractModule&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Assume if we already have a NetworkBugDaoProvider class&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NetworkBugDaoProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// if we need a new provider class&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Provides&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;provideBugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NetworkBugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Use Constructor Injection in service implementation. The &lt;code class=&quot;highlighter-rouge&quot;&gt;@Inject&lt;/code&gt; annotation will let Guice look for instance for BugDao, in this case it will trigger NetworkBugDaoProvider when creating service with Guice.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RandomBugGeneratorService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Constructor&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bugDao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateBug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Bug&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRandomBug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then when you want to use BugGeneratorService&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Injector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;injector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Guice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createInjector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyModule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugGeneratorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;injector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;generateBug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Write unit tests as usual using constructor to create instance&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RandomBugGeneratorServiceUnitTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// unit tests...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Integration tests with injector. The &lt;code class=&quot;highlighter-rouge&quot;&gt;@Inject&lt;/code&gt; annotation will get RandomBugGeneratorService instance for BugGeneratorService, avoiding redundant code for creating RandomBugGeneratorService with BugDao.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BugGeneratorServiceIntegrationTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// tests...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;more-examples&quot;&gt;More Examples&lt;/h3&gt;
&lt;p&gt;Besides what we have talked about, there are more things you can make use of.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Applying Scopes to reuse the instance created at the first time &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asEagerSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// with @Singleton when doing @Provides&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Provides&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Singleton&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;provideBugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NetworkBugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;common-question&quot;&gt;Common Question&lt;/h3&gt;
&lt;h4 id=&quot;injecting-constructor-or-fields&quot;&gt;injecting constructor or fields?&lt;/h4&gt;
&lt;p&gt;Injecting constructor is the recommended way when you’re using final objects. Plus it is easy to write tests using this design.&lt;/p&gt;

&lt;p&gt;Injecting fields is neither testable or safe to use for immutable field.&lt;/p&gt;
&lt;h4 id=&quot;want-a-constructor-with-parameters-from-the-caller&quot;&gt;want a constructor with parameters from the caller&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RandomBugGeneratorService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Constructor&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Solution #0: add a factory to create instance only with a method to create new instance with parameters from caller, while injecting from Guice when creating the factory.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BugGeneratorServiceFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RandomBugGeneratorServiceFactory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BugGeneratorServiceFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BugDaoProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDaoProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RandomBugGeneratorServiceFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugDaoProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDaoProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bugDaoProvider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDaoProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bugDaoProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and bind BugGeneratorServiceFactory to RandomBugGeneratorServiceFactory.&lt;/p&gt;

&lt;p&gt;Solution #1: AssistedInject&lt;/p&gt;

&lt;p&gt;we still need factories to handle parameters from Guice and caller separately, but use &lt;code class=&quot;highlighter-rouge&quot;&gt;@Assisted&lt;/code&gt; to avoid manually writing RandomBugGeneratorServiceFactory class in solution#1. It will link parameters with &lt;code class=&quot;highlighter-rouge&quot;&gt;@Assisted&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;create()&lt;/code&gt; method in factory, and bind the base factory(BugGeneratorServiceFactory) to the provider generated by Guice.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RandomBugGeneratorService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Assisted&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Assisted&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bugNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FactoryModuleBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;implement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomBugGeneratorService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BugGeneratorServiceFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Jiahui</name></author><category term="blog" /><category term="tech" /><summary type="html">Dependency Injection and Using Guice</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/morpho-1.jpg" /></entry><entry><title type="html">distributed queue</title><link href="http://localhost:4000/projects/queue.html" rel="alternate" type="text/html" title="distributed queue" /><published>2019-03-10T00:00:00-08:00</published><updated>2019-03-10T00:00:00-08:00</updated><id>http://localhost:4000/projects/queue</id><content type="html" xml:base="http://localhost:4000/projects/queue.html"></content><author><name>admin</name></author><category term="projects" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/cuba-1.jpg" /></entry><entry><title type="html">WELCOME!</title><link href="http://localhost:4000/blog/test.html" rel="alternate" type="text/html" title="WELCOME!" /><published>2019-03-10T00:00:00-08:00</published><updated>2019-03-10T00:00:00-08:00</updated><id>http://localhost:4000/blog/test</id><content type="html" xml:base="http://localhost:4000/blog/test.html">&lt;h1 id=&quot;welcome&quot;&gt;WELCOME&lt;/h1&gt;</content><author><name>admin</name></author><category term="blog" /><summary type="html">WELCOME</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/cuba-1.jpg" /></entry><entry><title type="html">bookyard</title><link href="http://localhost:4000/projects/bookyard.html" rel="alternate" type="text/html" title="bookyard" /><published>2019-02-10T00:00:00-08:00</published><updated>2019-02-10T00:00:00-08:00</updated><id>http://localhost:4000/projects/bookyard</id><content type="html" xml:base="http://localhost:4000/projects/bookyard.html"></content><author><name>admin</name></author><category term="projects" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/nyc-1.jpg" /></entry></feed>